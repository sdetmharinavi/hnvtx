import { ShieldCheck, Database, Route, GitBranch, GitCommit, Users, Cpu, BellRing, Server } from "lucide-react";
import { WorkflowSection } from "../types/workflowTypes";
import { FaDiagramNext } from "react-icons/fa6";
import { BsPeople } from "react-icons/bs";
import { ImUserTie } from "react-icons/im";

export const workflowSections: WorkflowSection[] = [
  {
    value: "auth",
    icon: ShieldCheck,
    title: "Authentication & Authorization",
    subtitle: "User registration, login & RBAC",
    gradient: "from-violet-500 to-purple-600",
    iconColor: "text-violet-400",
    bgGlow: "bg-violet-500/10",
    color: "violet",
    purpose: "To manage user registration, login, session handling, and role-based access control (RBAC).",
    workflows: [
      {
        title: "Workflow A: New User Registration & Onboarding Prompt",
        userSteps: [
          "User fills out the form on `/signup` and submits.",
          "User receives a verification email and clicks the link.",
          "User will log in and redirected to the `/dashboard` page.",
          "A welcome popup appears, prompting them to complete their profile.",
          "User can choose to 'Update Profile', 'Maybe Later', or 'Don't show again'.",
        ],
        uiSteps: ["On submit, user is redirected to `/verify-email`.", "After email verification, the `/auth/callback` route sends the user to `/dashboard`.", "On the dashboard, the `OnboardingPromptModal` appears if the profile is incomplete."],
        techSteps: [
          "`signUp` calls `supabase.auth.signUp`.",
          'DB Trigger `on_auth_user_created` inserts a `user_profiles` record and adds `{"needsOnboarding": true}` to the `preferences` JSONB column.',
          "The `app/dashboard/page.tsx` component uses the `useGetMyUserDetails` hook.",
          "A `useEffect` checks if `profile.preferences.needsOnboarding` is `true` and if `profile.preferences.showOnboardingPrompt` is not `false`.",
          "If conditions are met, the modal's state is set to open.",
          "Clicking 'Don't show again' updates the `preferences` column, setting `showOnboardingPrompt: false`.",
          "Clicking 'Update Profile' navigates the user to the `/onboarding` page.",
        ],
      },
      {
        title: "Workflow B: User Login & Session Management",
        userSteps: ["User enters credentials on `/login` and clicks 'Sign in'."],
        uiSteps: ["Loading state shown.", "On success, user is redirected to `/dashboard`.", "On failure, an error toast is displayed."],
        techSteps: [
          "`signIn` function in `useAuth` calls `supabase.auth.signInWithPassword`.",
          "The hook verifies that the response contains no error AND a valid session object.",
          "If verification fails, an error toast is shown and the function returns `success: false`.",
          "If successful, Supabase returns a session with a JWT, which is stored in cookies.",
          "The `middleware.ts` refreshes the user's auth token on subsequent requests.",
          "The `useAuthStore` (Zustand) is updated by the `onAuthStateChange` listener, making the user session globally available.",
        ],
      },
      {
        title: "Workflow C: Role Synchronization & RLS",
        userSteps: ["An admin changes a user's role in the User Management page."],
        uiSteps: ["The user's permissions are updated for their next session."],
        techSteps: [
          "An admin action updates the `role` column in the `public.user_profiles` table.",
          "A database trigger (`sync_user_role_trigger`) fires on update.",
          "This trigger updates the `raw_app_meta_data` JSONB column in the corresponding `auth.users` table, setting the new role.",
          "The user's JWT is now minted with the new role claim, which is used by RLS policies to grant access.",
        ],
      },
      {
        title: "Workflow D: Existing User Profile Update",
        userSteps: ["User clicks on their avatar in the header and selects 'Update Profile'.", "User is taken to the `/onboarding` page, which acts as a profile editor.", "User changes their details and clicks 'Update Profile'."],
        uiSteps: ["The form on the `/onboarding` page is pre-populated with the user's existing data.", "A toast notification confirms that the profile has been updated successfully.", "The user remains on the profile page to make further changes."],
        techSteps: [
          "The `AuthButton` component contains a `<Link>` that navigates to `/onboarding`.",
          "The `OnboardingFormEnhanced` component fetches the user's profile using the `useGetMyUserDetails` hook.",
          "An `useEffect` populates the form fields with the fetched data.",
          "On submit, `OnboardingFormEnhanced` calls the `useTableUpdate` mutation, which updates the `user_profiles` record and sets `needsOnboarding` to `false` within the `preferences` column.",
          "The `isDirty` state from `react-hook-form` ensures the update only happens if changes were actually made.",
        ],
      },
    ],
  },
  {
    value: "base_structure",
    icon: Server,
    title: "Base Structure Setup",
    subtitle: "Categories, Lookups, Areas & Designations",
    gradient: "from-gray-500 to-slate-600",
    iconColor: "text-gray-400",
    bgGlow: "bg-gray-500/10",
    color: "yellow", // Using a distinct color
    purpose: "To configure the foundational data that categorizes and organizes all other entities in the system. This setup is typically performed by an administrator before regular data entry begins.",
    workflows: [
      {
        title: "Workflow A: Managing Categories & Lookups",
        userSteps: [
          "Admin goes to `/dashboard/categories` and creates a new category (e.g., 'NODE_TYPES'). This acts as a grouping for dropdown options.",
          "Admin then navigates to `/dashboard/lookup` and selects the newly created 'Node Types' category.",
          "Clicks 'Add New' to open the `LookupModal`.",
          "Admin adds a new lookup type, filling in the details:",
          "  - **Name:** 'Base Transceiver Station' (The human-readable text shown in dropdowns).",
          "  - **Code:** 'BTS' (A short, unique code for this type, useful for display or logic).",
          "  - **Sort Order:** '10' (A number to control the display order in lists; lower numbers appear first).",
          "  - **System Default:** Left unchecked. This flag is reserved for critical, system-required types and prevents their deletion.",
          "Admin saves the new lookup type.",
        ],
        uiSteps: [
          "The Categories page allows creating and renaming high-level categories.",
          "On the Lookups page, a category must be selected to view or add types.",
          "The `DataTable` lists all lookup types for the selected category, ordered by the `sort_order` value.",
          "If a lookup type has `is_system_default` set to `true`, its Edit and Delete buttons are disabled in the UI to prevent accidental modification.",
        ],
        techSteps: [
          "A **Category** is not a separate table; it's a distinct value in the `category` column of the `lookup_types` table. It acts as the primary grouping key.",
          "A **Lookup Type** is a single row in the `lookup_types` table.",
          "The **`name`** field is the primary value displayed to users in dropdowns and tables.",
          "The **`code`** field provides a concise, alternative identifier. It's often used for badges or in places where a full name is too long.",
          "The **`sort_order`** field dictates the ordering of items when fetched for dropdowns. This allows for a custom order that isn't alphabetical (e.g., 'High', 'Medium', 'Low').",
          "The **`is_system_default`** flag is a protective measure. When `true`, UI controls for editing and deleting are disabled. This prevents an admin from deleting a lookup type that the application's internal logic depends on (e.g., a status type like 'Active' or 'Pending').",
          "All dropdowns for types (e.g., Node Type, Ring Type) are populated by querying the `lookup_types` table with a `WHERE category = ?` clause and ordering by `sort_order`.",
        ],
      },
      {
        title: "Workflow B: Managing Maintenance Areas",
        userSteps: [
          "Admin navigates to `/dashboard/maintenance-areas`.",
          "Clicks 'Add New' and fills out the `AreaFormModal` to create a top-level area (e.g., a Zone).",
          "Admin then creates another area (e.g., a Terminal), but this time selects the newly created Zone as its 'Parent Area', establishing a hierarchy.",
        ],
        uiSteps: [
          "The `EntityManagementComponent` displays the areas in a hierarchical tree view or a simple list view.",
          "The form modal for an area dynamically filters the 'Parent Area' dropdown to prevent a user from making an area its own child (circular dependency).",
        ],
        techSteps: [
          "The page uses the `EntityManagementComponent` with `areaConfig`, which defines the parent-child relationship via the `parent_id` foreign key field.",
          "Data is fetched using `useTableWithRelations` to include nested `parent_area` and `child_areas` data in a single query.",
          "The `AreaFormModal` uses `useTableInsert` or `useTableUpdate` to modify records in the `maintenance_areas` table.",
        ],
      },
    ],
  },
  {
    value: 'designations_crud',
    icon: ImUserTie,
    title: 'Designation Management',
    subtitle: 'Organizing employee roles in a hierarchy',
    gradient: 'from-cyan-500 to-sky-600',
    iconColor: 'text-cyan-400',
    bgGlow: 'bg-cyan-500/10',
    color: 'cyan',
    purpose: 'To establish a hierarchical structure for employee roles, enabling clear reporting lines and organizational charts. This feature is crucial for building an accurate representation of the company structure.',
    workflows: [
      {
        title: 'Workflow: Managing a Designation Hierarchy',
        userSteps: [
          "Admin navigates to `/dashboard/designations`.",
          "Clicks 'Add New Designation' to create a top-level role (e.g., 'General Manager') without selecting a parent.",
          "Clicks 'Add New' again to create a child role (e.g., 'Deputy Manager') and selects 'General Manager' from the 'Parent Designation' dropdown.",
          "User toggles between 'Tree' and 'List' view to visualize the structure.",
          "Admin clicks the 'Delete' icon on a role.",
        ],
        uiSteps: [
          'The `EntityManagementComponent` is the main layout, displaying designations in either a nested tree structure or a flat list.',
          'The `DesignationFormModal` appears for creating or editing. It intelligently filters the `Parent Designation` dropdown to prevent a designation from being its own child or grandchild (a circular dependency).',
          'A `ConfirmModal` appears before any deletion to ensure the action is intentional.',
        ],
        techSteps: [
          'The page is powered by the generic `EntityManagementComponent`, configured with `designationConfig`. This config object specifies `isHierarchical: true` and sets `parent_id` as the relational key.',
          'Data is fetched using the `useTableWithRelations` hook, which performs a self-join on the `employee_designations` table to get the `parent_designation` object for each record.',
          'The `useEntityManagement` hook processes the flat list into a nested tree structure for the UI by matching `id` and `parent_id` fields.',
          'When creating or editing, the `DesignationFormModal` uses the `useTableInsert` or `useTableUpdate` mutation to save data directly to the `employee_designations` table.',
          'The `useDelete` hook (via `useDeleteManager`) handles deletion by calling `supabase.from("employee_designations").delete()`. Postgres handles the `ON DELETE SET NULL` constraint for any children of the deleted designation.',
        ],
      },
    ],
  },
  {
    value: "employees_crud",
    icon: BsPeople,
    title: "Employee Management",
    subtitle: "Managing employee records and roles",
    gradient: "from-sky-500 to-blue-600",
    iconColor: "text-sky-400",
    bgGlow: "bg-sky-500/10",
    color: "cyan",
    purpose: "To maintain a central database of all employees, their designations, contact information, and assigned maintenance areas.",
    workflows: [
      {
        title: "Workflow: Managing Employee Records",
        userSteps: ["Admin navigates to `/dashboard/employees`.", "Clicks 'Add New' to open the `EmployeeForm`.", "Fills in employee details, selecting a pre-configured Designation and Maintenance Area.", "Saves the new employee record."],
        uiSteps: ["The `DataTable` on the page lists all employees.", "The form modal provides dropdowns for selecting related data like designations.", "On success, a toast appears, and the employee list is refreshed."],
        techSteps: [
          "The page uses `useCrudManager` configured for the `employees` table.",
          "The `EmployeeForm` uses `useTableInsert` or `useTableUpdate` to save data to the `employees` table.",
          "The `employee_designation_id` and `maintenance_terminal_id` fields are foreign keys linking to their respective tables.",
          "The main data table queries the `v_employees` view to efficiently join and display the names of the designation and maintenance area.",
        ],
      },
    ],
  },
  {
    value: "diagrams_crud",
    icon: FaDiagramNext,
    title: "Diagrams & File Management",
    subtitle: "Uploading and organizing network diagrams",
    gradient: "from-rose-500 to-pink-600",
    iconColor: "text-rose-400",
    bgGlow: "bg-rose-500/10",
    color: "orange", // Using a distinct color
    purpose: "To provide a centralized repository for uploading, storing, and accessing network diagrams, schematics, and other related documents.",
    workflows: [
      {
        title: "Workflow: Uploading a Diagram",
        userSteps: ["User navigates to the `/dashboard/diagrams` page.", "Creates a new folder or selects an existing one.", "Drags a file into the upload area or clicks 'Select Files'.", "Clicks the 'Upload' button."],
        uiSteps: ["The `FileUploader` component provides the main interface.", "A list of selected files appears before uploading.", "A success toast confirms the upload, and the file appears in the `FileTable` under the selected folder."],
        techSteps: [
          "The `useFolders` hook fetches and manages folder state from the `folders` table.",
          "The `useUppyUploader` hook handles the client-side file processing, including optimizations.",
          "Uppy uploads the file to a serverless API route at `/api/upload` (not shown, but assumed).",
          "The API route uploads the file to Supabase Storage.",
          "On `upload-success`, the `useUppyUploader` hook calls the `useUploadFile` mutation, which inserts a new record into the `files` table, linking the file metadata to the `folder_id` and `user_id`.",
        ],
      },
    ],
  },
  {
    value: "users_crud",
    icon: Users,
    title: "User CRUD Operations",
    subtitle: "Creating, updating, and deleting users",
    gradient: "from-blue-500 to-cyan-600",
    iconColor: "text-blue-400",
    bgGlow: "bg-blue-500/10",
    color: "blue",
    purpose: "To provide administrators with the tools to manage user accounts, assign roles, and control access.",
    workflows: [
      {
        title: "Workflow A: Viewing & Filtering Users",
        userSteps: ["Admin navigates to the `/dashboard/users` page.", "Admin uses the search bar and filter dropdowns to find specific users."],
        uiSteps: ["The `DataTable` displays a paginated list of users from the `v_user_profiles_extended` view.", "The `UserFilters` component updates the view as the admin types or selects filters."],
        techSteps: [
          "The `AdminUsersPage` uses a `useCrudManager` hook with a `useUsersData` adapter.",
          "The `useUsersData` adapter calls the `admin_get_all_users_extended` Supabase RPC.",
          "The RPC function performs a server-side search and filter on the `v_user_profiles_extended` view and returns the paginated results.",
        ],
      },
      {
        title: "Workflow B: Creating a New User",
        userSteps: ["Admin clicks 'Add New'.", "Fills in the user's details (name, email, password, role) in the `UserCreateModal`.", "Clicks 'Create User'."],
        uiSteps: ["The modal appears for data entry.", "On success, a toast notification is shown, the modal closes, and the user list refreshes."],
        techSteps: [
          "The `handleCreateUser` function calls the `createUser` mutation from `useAdminUserOperations` hook.",
          "This mutation sends a `POST` request to the `/api/admin/users` serverless function.",
          "The API route securely hashes the password and inserts a new record into `auth.users`, which then triggers the creation of a profile in `public.user_profiles`.",
          "The frontend invalidates the user list query to show the new user.",
        ],
      },
      {
        title: "Workflow C: Editing a User",
        userSteps: ["Admin clicks the 'Edit' icon on a user row.", "Modifies user details (e.g., name, role, status) in the `UserProfileEditModal`.", "Clicks 'Save Changes'."],
        uiSteps: ["The modal opens, pre-filled with the selected user’s data.", "On success, a toast is shown, and the UI updates with the new information."],
        techSteps: [
          "The `onEdit` handler from `useCrudManager` opens the modal with the user record.",
          "Submitting the form calls the `updateProfile` mutation from the `useAdminUpdateUserProfile` hook.",
          "This mutation calls the `admin_update_user_profile` RPC, which updates the `user_profiles` table.",
          "If the role is changed, a database trigger syncs it to the `auth.users` table.",
          "The user list query is invalidated and refetched.",
        ],
      },
      {
        title: "Workflow D: Deleting a User",
        userSteps: ["Admin selects one or more users using the checkboxes.", "Clicks the 'Delete' button in the `BulkActions` toolbar.", "Confirms the deletion in the `ConfirmModal`."],
        uiSteps: ["A confirmation modal appears to prevent accidental deletion.", "On success, a toast is shown, and the user(s) are removed from the table."],
        techSteps: [
          "The `handleBulkDelete` function calls the `bulkDelete` mutation from `useAdminUserOperations`.",
          "This mutation sends a `DELETE` request to the `/api/admin/users` endpoint with the selected user IDs.",
          "The API route first verifies the requester is a super admin, then uses a privileged Supabase client to call `supabase.auth.admin.deleteUser()` for each ID.",
          "The `ON DELETE CASCADE` constraint on the `user_profiles` table automatically removes the corresponding profile.",
          "The user list query is invalidated to refresh the UI.",
        ],
      },
    ],
  },
  {
    value: "nodes_crud",
    icon: Cpu,
    title: "Node CRUD Operations",
    subtitle: "Managing physical network locations",
    gradient: "from-emerald-500 to-teal-600",
    iconColor: "text-emerald-400",
    bgGlow: "bg-emerald-500/10",
    color: "teal",
    purpose: "To create, view, update, and delete network nodes, which represent physical sites like exchanges, BTS towers, or junction points.",
    workflows: [
      {
        title: "Workflow A: Viewing & Filtering Nodes",
        userSteps: ["User navigates to the `/dashboard/nodes` page.", "User types a node name in the search bar or selects a node type from the dropdown."],
        uiSteps: ["The `DataTable` displays a list of nodes from the `v_nodes_complete` view.", "The list updates automatically as the user interacts with the filters."],
        techSteps: [
          "The `NodesPage` uses `useCrudManager` with a `useNodesData` adapter.",
          "The `useNodesData` adapter calls the `get_paged_data` RPC function with the specified filters.",
          "The RPC function queries the `v_nodes_complete` view to get the data along with related names (e.g., maintenance area name).",
        ],
      },
      {
        title: "Workflow B: Creating or Editing a Node",
        userSteps: ["User clicks 'Add New' or the 'Edit' icon on a node row.", "Fills out the node details (name, type, location, etc.) in the `NodeFormModal`.", "Clicks 'Save'."],
        uiSteps: ["A modal opens with the form.", "On success, a toast notification appears, and the table refreshes."],
        techSteps: [
          "`useCrudManager` opens the `NodeFormModal` with either `null` (for create) or the selected node data (for edit).",
          "On form submission, `handleSave` is called, which triggers either the `useTableInsert` or `useTableUpdate` hook.",
          "The mutation sends a request directly to the Supabase `nodes` table.",
          "TanStack Query invalidates the `v_nodes_complete` view query, causing the UI to refetch and display the changes.",
        ],
      },
      {
        title: "Workflow C: Deleting a Node",
        userSteps: ["User clicks the 'Delete' icon on a node row.", "Confirms the action in the `ConfirmModal`."],
        uiSteps: ["A confirmation prompt appears.", "On success, a toast is shown, and the node is removed from the table."],
        techSteps: [
          "`crudActions.handleDelete` is called, which uses `useDeleteManager`.",
          "`useDeleteManager` triggers the `ConfirmModal`.",
          "On confirmation, a `useTableDelete` mutation is called, which sends a `DELETE` request to the Supabase `nodes` table for the specified ID.",
          "The query for `v_nodes_complete` is invalidated, refreshing the UI.",
        ],
      },
    ],
  },
  {
    value: "rings_crud",
    icon: BellRing,
    title: "Ring CRUD Operations",
    subtitle: "Defining and managing logical network rings",
    gradient: "from-orange-500 to-amber-600",
    iconColor: "text-orange-400",
    bgGlow: "bg-orange-500/10",
    color: "orange",
    purpose: "To manage logical network rings, which group various systems together to form a resilient communication path.",
    workflows: [
      {
        title: "Workflow A: Viewing & Filtering Rings",
        userSteps: ["User navigates to the `/dashboard/rings` page.", "User types a ring name in the search bar."],
        uiSteps: ["The `DataTable` displays a list of rings from the `v_rings` view, showing details like total nodes and maintenance area."],
        techSteps: ["The `RingsPage` uses `useCrudManager` with a `useRingsData` adapter.", "The `useRingsData` adapter calls the `get_paged_data` RPC, which queries the `v_rings` view."],
      },
      {
        title: "Workflow B: Creating or Editing a Ring",
        userSteps: ["User clicks 'Add New' or 'Edit'.", "Fills out the ring's name, type, and maintenance terminal in the `RingModal`.", "Clicks 'Save'."],
        uiSteps: ["A modal opens with the form.", "On success, a toast notification appears, and the table refreshes."],
        techSteps: ["`useCrudManager` opens the `RingModal`.", "On submission, `handleSave` triggers `useTableInsert` or `useTableUpdate` on the `rings` table.", "The query for the `v_rings` view is invalidated, refreshing the UI."],
      },
      {
        title: "Workflow C: Associating Systems with a Ring",
        userSteps: ["User clicks the 'Manage Systems' icon on a ring row.", "In the `RingSystemsModal`, user moves systems from the 'Available' list to the 'Associated' list.", "User clicks 'Save Changes'."],
        uiSteps: ["A dual-listbox modal appears, showing systems in the same maintenance area.", "On success, a toast is shown, the modal closes, and the 'Total Nodes' count in the table updates."],
        techSteps: [
          "The `handleManageSystems` handler opens the `RingSystemsModal`.",
          "The modal fetches associated systems (from `v_systems_complete` where `ring_id` matches) and available systems (from `v_systems_complete` where `ring_id` is null and `maintenance_terminal_id` matches).",
          "Saving triggers the `updateMutation`, which calls the `update_ring_system_associations` RPC function.",
          "This RPC function deletes old associations and inserts the new list of system IDs into the `ring_based_systems` junction table.",
          "The `v_rings` view query is invalidated, causing the 'Total Nodes' count to update.",
        ],
      },
    ],
  },
  {
    value: "routes",
    icon: Route,
    title: "OFC & Route Management",
    subtitle: "Cable segmentation & fiber splicing",
    gradient: "from-teal-500 to-emerald-600",
    iconColor: "text-teal-400",
    bgGlow: "bg-teal-500/10",
    color: "teal",
    purpose: "An advanced tool to manage the physical segmentation and fiber splicing of an optical fiber cable (OFC) route.",
    workflows: [
      {
        title: "Workflow A: Visualizing a Route",
        userSteps: ["User selects an OFC route from the dropdown."],
        uiSteps: ["The `RouteVisualization` component renders the start/end nodes and any existing Junction Closures (JCs).", "A list of `Cable Segments` is displayed below the visualization."],
        techSteps: [
          "The page component's `useQuery` fetches data from the API route `/api/route/[id]`.",
          "The API route fetches data from multiple tables: `v_ofc_cables_complete`, `junction_closures`, and `cable_segments`.",
          "The API returns a consolidated `RouteDetailsPayload` object.",
        ],
      },
      {
        title: "Workflow B: Adding a Junction Closure",
        userSteps: ["User clicks 'Add Junction Closure'.", "User fills in the JC's name and position in the `JcFormModal` and saves."],
        uiSteps: ["The `RouteVisualization` updates to show the new JC on the cable path.", "The `Cable Segments` list is recalculated and re-rendered."],
        techSteps: [
          "The `JcFormModal` calls the `add_junction_closure` Supabase RPC function.",
          "This RPC inserts a new record into the `nodes` table (for the JC's physical location) and the `junction_closures` table.",
          "An `AFTER INSERT` trigger on `junction_closures` fires the `recalculate_segments_for_cable` function.",
          "This function deletes all old segments for that cable and creates new ones based on the new sequence of nodes and JCs, storing them in the `cable_segments` table.",
          "The frontend refetches the route details, updating the UI.",
        ],
      },
      {
        title: "Workflow C: Managing Fiber Splices",
        userSteps: ["User clicks on an existing JC in the visualization.", "The 'Splice Management' tab becomes active.", "User selects a fiber from one segment and then clicks an available fiber on another segment to create a splice."],
        uiSteps: ["The `FiberSpliceManager` component displays a matrix of all segments and fibers at that JC.", "UI provides visual cues for selected, available, and used fibers."],
        techSteps: [
          "`FiberSpliceManager` calls the `get_jc_splicing_details` RPC function to fetch the current state of all fibers and splices at the JC node.",
          "`manage_splice` RPC function is called with `p_action: 'create'`, inserting a record into the `fiber_splices` table.",
          "The frontend query for splicing details is invalidated and refetched, updating the UI.",
        ],
      },
    ],
  },
  {
    value: "provisioning",
    icon: GitBranch,
    title: "Logical Path & Fiber Provisioning",
    subtitle: "End-to-end service provisioning",
    gradient: "from-cyan-500 to-blue-600",
    iconColor: "text-cyan-400",
    bgGlow: "bg-cyan-500/10",
    color: "cyan",
    purpose: "To define an end-to-end logical path over physical cable segments and provision working/protection fibers for a service.",
    workflows: [
      {
        title: "Workflow A: Building a Logical Path",
        userSteps: ["User navigates to a System's detail page (`/dashboard/systems/[id]`).", "User clicks 'Initialize Path' to create a logical path record.", "In 'Build Mode', user clicks on nodes in the map to add cable segments to the path."],
        uiSteps: ["The `SystemRingPath` component displays a map of nodes and a list of segments in the path.", "The map highlights nodes in the current path."],
        techSteps: [
          "Initializing inserts a new record into `logical_fiber_paths`.",
          "Clicking a node calls the `find_cable_between_nodes` RPC to find the physical `ofc_cables` record.",
          "A new record is inserted into `logical_path_segments`, linking the `logical_fiber_paths` ID with the `ofc_cables` ID.",
          "The path is validated in real-time using the `validate_ring_path` RPC.",
        ],
      },
      {
        title: "Workflow B: Provisioning Fibers",
        userSteps: ["Once a valid path is built, the `FiberProvisioning` section appears.", "User selects a 'Working Fiber' and a 'Protection Fiber' from the dropdowns and clicks 'Save Changes'."],
        uiSteps: ["The dropdowns only show fibers that are continuously available across all segments of the logical path.", "After saving, the UI switches to a read-only view showing the provisioned fibers."],
        techSteps: [
          "The `useAvailableFibers` hook calls the `get_continuous_available_fibers` RPC, which finds common unallocated fiber numbers across all `ofc_connections` in the path.",
          "Saving calls the `provision_ring_path` RPC.",
          "This RPC creates two new `logical_fiber_paths` records (one for working, one for protection) and then updates the `logical_path_id` and `fiber_role` columns on all relevant `ofc_connections` records.",
          "This atomically allocates the fibers to the service.",
        ],
      },
    ],
  },
  {
    value: "auditing",
    icon: GitCommit,
    title: "Auditing System",
    subtitle: "Automatic change tracking & logging",
    gradient: "from-orange-500 to-red-600",
    iconColor: "text-orange-400",
    bgGlow: "bg-orange-500/10",
    color: "orange",
    purpose: "To automatically log all data modifications (INSERT, UPDATE, DELETE) for accountability and history tracking.",
    workflows: [
      {
        title: "Workflow: Automatic Data Change Logging",
        userSteps: ["An admin edits and saves an employee's profile."],
        uiSteps: ["The change is reflected in the UI as usual.", "An admin with permission can view the change log in the 'User Activity' section."],
        techSteps: [
          "The `UPDATE` operation on the `employees` table completes.",
          "An `AFTER UPDATE` trigger (`employees_log_trigger`) on the table fires automatically.",
          "The trigger executes the `log_data_changes()` function.",
          "This function captures the `OLD` and `NEW` row data, converts them to JSONB, and determines the operation type ('UPDATE').",
          "It then calls `log_user_activity()`, passing the captured data.",
          "The `log_user_activity()` function inserts a new record into the `user_activity_logs` table, including the current user's ID (`auth.uid()`) and role (`get_my_role()`).",
          "The entire process is atomic and happens within the same database transaction as the original update.",
        ],
      },
    ],
  },
];
