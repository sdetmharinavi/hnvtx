import { toPgBoolean, toPgDate, toTitleCase } from "@/config/helper-functions";
import {
  AllColumnKeys,
  ColumnMeta,
  ColumnTransform,
  GenericRow,
  TableMetaMap,
  TableName,
  TableOrViewName,
  UploadMetaMap,
  UploadTableMeta,
} from "@/config/helper-types";
import { Tables } from "@/types/supabase-types";



export const UPLOAD_TABLE_META: UploadMetaMap = {
  employees: {
    uploadType: "upsert",
    conflictColumn: "employee_pers_no",
    isUploadEnabled: true,
  },
  user_profiles: {
    uploadType: "upsert",
    conflictColumn: "id",
    isUploadEnabled: true,
  },
  lookup_types: {
    uploadType: "upsert",
    conflictColumn: "id",
    isUploadEnabled: true,
  },
  rings: { uploadType: "upsert", conflictColumn: "id", isUploadEnabled: true },
  employee_designations: {
    uploadType: "upsert",
    conflictColumn: "id",
    isUploadEnabled: true,
  },
  maintenance_areas: {
    uploadType: "upsert",
    conflictColumn: "id",
    isUploadEnabled: true,
  },
  ofc_cables: {
    uploadType: "upsert",
    conflictColumn: "id",
    isUploadEnabled: true,
  },
  ofc_connections: {
    uploadType: "upsert",
    conflictColumn: "id",
    isUploadEnabled: true,
  },
  nodes: { uploadType: "upsert", conflictColumn: "id", isUploadEnabled: true },
  systems: {
    uploadType: "upsert",
    conflictColumn: "id",
    isUploadEnabled: true,
  },
};

// Per-table column metadata for UI/export and upload (only override where needed)
export const TABLE_COLUMN_META: TableMetaMap = {
  employees: {
    employee_dob: {
      title: "Employee DOB",
      excelHeader: "Employee DOB",
      transform: toPgDate,
      excelFormat: "date",
    },
    employee_doj: {
      title: "Employee DOJ",
      excelHeader: "Employee DOJ",
      transform: toPgDate,
      excelFormat: "date",
    },
    status: { title: "Status", excelHeader: "Status", transform: toPgBoolean },
  },
  lookup_types: {
    status: { transform: toPgBoolean },
    is_system_default: { transform: toPgBoolean },
  },
  rings: {
    status: { transform: toPgBoolean },
  },
  user_profiles: {
    date_of_birth: { transform: toPgDate, excelFormat: "date" },
  },
  ofc_cables: {
    commissioned_on: { transform: toPgDate, excelFormat: "date" },
    status: { transform: toPgBoolean },
  },
  ofc_connections: {
    en_dom: { transform: toPgDate, excelFormat: "date" },
    sn_dom: { transform: toPgDate, excelFormat: "date" },
    status: { transform: toPgBoolean },
  },
  nodes: {
    status: { transform: toPgBoolean },
  },
  systems: {
    commissioned_on: { transform: toPgDate, excelFormat: "date" },
    status: { transform: toPgBoolean },
  },
};

  // Build UI column configs (lightweight structure; consumer can enrich widths/formats)
  export function buildColumnConfig<T extends TableOrViewName>(tableName: T) {
    const keys = TABLE_COLUMN_KEYS[tableName] as (keyof GenericRow<T> & string)[];
    const meta = (TABLE_COLUMN_META[tableName as TableName] || {}) as Record<
      string,
      ColumnMeta
    >;
    return keys.map((key) => {
      const m = meta[key] || {};
      const title = m.title ?? toTitleCase(key);
      return {
        key,
        dataIndex: key,
        title,
        excelFormat: m.excelFormat,
      };
    });
  }
  // Build upload config from SSOT
  export function buildUploadConfig<T extends TableName>(tableName: T) {
    const keys = TABLE_COLUMN_KEYS[tableName] as (keyof Tables<T> & string)[];
    const meta = (TABLE_COLUMN_META[tableName] || {}) as Record<
      string,
      ColumnMeta
    >;
    const tableMeta = (UPLOAD_TABLE_META[tableName] || {
      uploadType: "upsert",
    }) as UploadTableMeta<T>;
  
    const columnMapping = keys.map((key) => {
      const m = meta[key] || {};
      const excelHeader = m.excelHeader ?? toTitleCase(key);
      // Auto-infer transforms if not explicitly provided
      let transform = m.transform as ColumnTransform | undefined;
      if (!transform) {
        const k = String(key).toLowerCase();
        if (k.endsWith("_at") || k.endsWith("_on") || k.includes("date")) {
          transform = toPgDate;
        } else if (
          k.startsWith("is_") ||
          k.startsWith("has_") ||
          k.startsWith("can_") ||
          k.includes("enabled") ||
          k.includes("active") ||
          k === "status"
        ) {
          transform = toPgBoolean;
        }
      }
      return {
        excelHeader,
        dbKey: key,
        transform,
      };
    });
  
    return {
      tableName,
      columnMapping,
      uploadType: tableMeta.uploadType,
      conflictColumn: tableMeta.conflictColumn,
      isUploadEnabled: tableMeta.isUploadEnabled ?? true,
    };
  }

/**
 * The single source of truth for the default columns to be displayed for each table.
 * This is the ONLY place you need to manually list column names.
 * TypeScript validates this entire object.
 */
export const TABLE_COLUMN_KEYS: AllColumnKeys = {
  // We list all keys for each table here.
  user_profiles: [
    "id",
    "first_name",
    "last_name",
    "phone_number",
    "role",
    "designation",
    "status",
    "avatar_url",
    "date_of_birth",
    "address",
    "preferences",
    "created_at",
    "updated_at",
  ],
  lookup_types: [
    "id",
    "category",
    "name",
    "code",
    "description",
    "sort_order",
    "status",
    "is_system_default",
    "created_at",
    "updated_at",
  ],
  maintenance_areas: [
    "id",
    "code",
    "name",
    "address",
    "email",
    "contact_person",
    "contact_number",
    "latitude",
    "longitude",
    "area_type_id",
    "parent_id",
    "status",
    "created_at",
    "updated_at",
  ],
  employee_designations: [
    "id",
    "name",
    "parent_id",
    "status",
    "created_at",
    "updated_at",
  ],
  employees: [
    "id",
    "employee_pers_no",
    "employee_name",
    "employee_email",
    "employee_dob",
    "employee_doj",
    "employee_contact",
    "employee_addr",
    "employee_designation_id",
    "maintenance_terminal_id",
    "status",
    "remark",
    "created_at",
    "updated_at",
  ],
  rings: [
    "id",
    "name",
    "description",
    "ring_type_id",
    "maintenance_terminal_id",
    "total_nodes",
    "status",
    "created_at",
    "updated_at",
  ],
  nodes: [
    "id",
    "name",
    "ip_address",
    "ring_id",
    "node_type_id",
    "site_id",
    "maintenance_terminal_id",
    "latitude",
    "longitude",
    "order_in_ring",
    "vlan",
    "builtup",
    "east_port",
    "west_port",
    "ring_status",
    "status",
    "remark",
    "created_at",
    "updated_at",
  ],
  ofc_cables: [
    "id",
    "route_name",
    "sn_id",
    "en_id",
    "capacity",
    "ofc_type_id",
    "ofc_owner_id",
    "asset_no",
    "transnet_id",
    "transnet_rkm",
    "current_rkm",
    "maintenance_terminal_id",
    "commissioned_on",
    "status",
    "remark",
    "created_at",
    "updated_at",
  ],
  systems: [
    "id",
    "system_name",
    "s_no",
    "node_id",
    "system_type_id",
    "ip_address",
    "maintenance_terminal_id",
    "commissioned_on",
    "status",
    "remark",
    "created_at",
    "updated_at",
  ],
  ofc_connections: [
    "id",
    "ofc_id",
    "logical_path_id",
    "system_id",
    "fiber_no_sn",
    "fiber_no_en",
    "path_segment_order",
    "connection_type",
    "connection_category",
    "source_port",
    "destination_port",
    "en_dom",
    "sn_dom",
    "otdr_distance_en_km",
    "otdr_distance_sn_km",
    "sn_power_dbm",
    "en_power_dbm",
    "route_loss_db",
    "status",
    "remark",
    "created_at",
    "updated_at",
  ],
  maan_connections: [
    "system_connection_id",
    "customer_name",
    "bandwidth_allocated_mbps",
    "sfp_type_id",
    "sfp_capacity",
    "sfp_serial_no",
    "sfp_port",
    "fiber_in",
    "fiber_out",
  ],
  maan_systems: ["system_id", "area", "ring_no"],
  cpan_systems: ["system_id", "area", "ring_no"],
  cpan_connections: [
    "system_connection_id",
    "customer_name",
    "bandwidth_allocated_mbps",
    "sfp_type_id",
    "sfp_capacity",
    "sfp_serial_no",
    "sfp_port",
    "fiber_in",
    "fiber_out",
  ],
  management_ports: [
    "id",
    "name",
    "port_no",
    "commissioned_on",
    "node_id",
    "system_id",
    "status",
    "remark",
    "created_at",
    "updated_at",
  ],

  sdh_connections: [
    "system_connection_id",
    "stm_no",
    "carrier",
    "a_customer",
    "a_slot",
    "b_customer",
    "b_slot",
  ],
  sdh_node_associations: [
    "id",
    "sdh_system_id",
    "node_id",
    "node_position",
    "node_ip",
  ],
  sdh_systems: ["system_id", "make", "gne"],
  system_connections: [
    "id",
    "system_id",
    "sn_id",
    "en_id",
    "connected_system_id",
    "media_type_id",
    "sn_interface",
    "en_interface",
    "sn_ip",
    "en_ip",
    "vlan",
    "bandwidth_mbps",
    "commissioned_on",
    "status",
    "remark",
    "created_at",
    "updated_at",
  ],
  vmux_connections: [
    "system_connection_id",
    "subscriber",
    "channel",
    "c_code",
    "tk",
  ],
  vmux_systems: ["system_id", "vm_id"],
  fiber_joints: [
    "id",
    "joint_name",
    "joint_category",
    "joint_type",
    "node_id",
    "maintenance_area_id",
    "latitude",
    "longitude",
    "location_description",
    "installed_date",
    "status",
    "remark",
    "created_at",
    "updated_at",
  ],
  logical_fiber_paths: [
    "id",
    "path_name",
    "source_system_id",
    "destination_system_id",
    "path_category",
    "path_type",
    "source_port",
    "destination_port",
    "service_type",
    "operational_status_category",
    "operational_status",
    "commissioned_date",
    "wavelength_nm",
    "bandwidth_gbps",
    "total_distance_km",
    "total_loss_db",
    "remark",
    "created_at",
    "updated_at",
  ],
  fiber_joint_connections: [
    "id",
    "joint_id",
    "input_ofc_id",
    "output_ofc_id",
    "input_fiber_no",
    "output_fiber_no",
    "logical_path_id",
    "splice_loss_db",
    "created_at",
    "updated_at",
  ],
  user_activity_logs: [
    "id",
    "created_at",
    "user_id",
    "user_role",
    "action_type",
    "table_name",
    "record_id",
    "old_data",
    "new_data",
    "details",
  ],

  // ===== Views =====
  v_cable_utilization: [
    "cable_id",
    "route_name",
    "capacity",
    "used_fibers",
    "available_fibers",
    "utilization_percent",
  ],
  v_end_to_end_paths: [
    "path_id",
    "path_name",
    "source_system_id",
    "destination_system_id",
    "operational_status",
    "segment_count",
    "route_names",
    "total_distance_km",
    "total_loss_db",
  ],
  v_ofc_cables_complete: [
    "id",
    "route_name",
    "sn_id",
    "en_id",
    "capacity",
    "ofc_type_id",
    "ofc_type_name",
    "ofc_type_code",
    "ofc_owner_id",
    "ofc_owner_name",
    "ofc_owner_code",
    "asset_no",
    "transnet_id",
    "transnet_rkm",
    "current_rkm",
    "maintenance_terminal_id",
    "maintenance_area_name",
    "maintenance_area_code",
    "commissioned_on",
    "status",
    "remark",
    "created_at",
    "updated_at",
    "total_count",
    "active_count",
    "inactive_count",
  ],
  v_nodes_complete: [
    "id",
    "name",
    "ip_address",
    "ring_id",
    "ring_name",
    "ring_type_id",
    "ring_type_name",
    "ring_type_code",
    "node_type_id",
    "node_type_name",
    "node_type_code",
    "site_id",
    "maintenance_terminal_id",
    "maintenance_area_name",
    "maintenance_area_code",
    "maintenance_area_type_name",
    "latitude",
    "longitude",
    "order_in_ring",
    "vlan",
    "builtup",
    "east_port",
    "west_port",
    "ring_status",
    "status",
    "remark",
    "created_at",
    "updated_at",
    "total_count",
    "active_count",
    "inactive_count",
  ],
  v_ofc_connections_complete: [
    "connection_category",
    "connection_type",
    "created_at",
    "destination_port",
    "en_dom",
    "en_id",
    "en_name",
    "en_power_dbm",
    "fiber_no_en",
    "fiber_no_sn",
    "id",
    "logical_path_id",
    "maintenance_area_name",
    "ofc_id",
    "ofc_route_name",
    "ofc_type_name",
    "otdr_distance_en_km",
    "otdr_distance_sn_km",
    "path_segment_order",
    "remark",
    "route_loss_db",
    "sn_dom",
    "sn_id",
    "sn_name",
    "sn_power_dbm",
    "source_port",
    "status",
    "system_id",
    "system_name",
    "updated_at",
  ],
  v_system_connections_complete: [
    "id",
    "system_id",
    "system_name",
    "system_type_name",
    "sn_name",
    "sn_node_name",
    "en_name",
    "en_node_name",
    "sn_ip",
    "en_ip",
    "sn_interface",
    "en_interface",
    "media_type_name",
    "bandwidth_mbps",
    "connected_system_name",
    "connected_system_type_name",
    "vlan",
    "commissioned_on",
    "remark",
    "status",
    "created_at",
    "updated_at",
    "maan_sfp_port",
    "maan_sfp_type_name",
    "maan_sfp_capacity",
    "maan_sfp_serial_no",
    "maan_fiber_in",
    "maan_fiber_out",
    "maan_customer_name",
    "maan_bandwidth_allocated_mbps",
    "sdh_stm_no",
    "sdh_carrier",
    "sdh_a_slot",
    "sdh_a_customer",
    "sdh_b_slot",
    "sdh_b_customer",
    "vmux_subscriber",
    "vmux_c_code",
    "vmux_channel",
    "vmux_tk",
  ],
  v_systems_complete: [
    "id",
    "system_name",
    "ip_address",
    "s_no",
    "commissioned_on",
    "remark",
    "status",
    "created_at",
    "updated_at",
    "node_name",
    "latitude",
    "longitude",
    "node_ip",
    "system_type_name",
    "system_type_code",
    "system_category",
    "maintenance_area_name",
    "maan_ring_no",
    "maan_area",
    "sdh_gne",
    "sdh_make",
    "vmux_vm_id",
  ],
  v_user_profiles_extended: [
    "id",
    "email",
    "last_sign_in_at",
    "created_at",
    "updated_at",
    "auth_updated_at",
    "is_super_admin",
    "is_email_verified",
    "email_confirmed_at",
    "is_phone_verified",
    "phone_confirmed_at",
    "first_name",
    "last_name",
    "full_name",
    "avatar_url",
    "phone_number",
    "date_of_birth",
    "address",
    "preferences",
    "role",
    "designation",
    "status",
    "raw_user_meta_data",
    "raw_app_meta_data",
    "computed_status",
    "account_age_days",
    "last_activity_period",
  ],
  v_lookup_types_with_count: [
    "id",
    "category",
    "name",
    "code",
    "description",
    "sort_order",
    "status",
    "is_system_default",
    "created_at",
    "updated_at",
    "total_count",
    "active_count",
    "inactive_count",
  ],
  v_employee_designations_with_count: [
    "id",
    "name",
    "parent_id",
    "status",
    "created_at",
    "updated_at",
    "total_count",
    "active_count",
    "inactive_count",
  ],
  v_maintenance_areas_with_count: [
    "id",
    "code",
    "name",
    "address",
    "email",
    "contact_person",
    "contact_number",
    "latitude",
    "longitude",
    "area_type_id",
    "parent_id",
    "status",
    "created_at",
    "updated_at",
    "total_count",
    "active_count",
    "inactive_count",
  ],
  v_employees_with_count: [
    "id",
    "employee_pers_no",
    "employee_name",
    "employee_email",
    "employee_dob",
    "employee_doj",
    "employee_contact",
    "employee_addr",
    "employee_designation_id",
    "maintenance_terminal_id",
    "status",
    "remark",
    "created_at",
    "updated_at",
    "total_count",
    "active_count",
    "inactive_count",
  ],
  v_rings_with_count: [
    // from rings r.*
    "id",
    "name",
    "description",
    "ring_type_id",
    "maintenance_terminal_id",
    "total_nodes",
    "status",
    "created_at",
    "updated_at",
  
    // from lookup_types lt_ring
    "ring_type_name",
    "ring_type_code",
    "ring_type_category",
    "ring_type_sort_order",
    "ring_type_is_system_default",
    "ring_type_status",
    "ring_type_created_at",
    "ring_type_updated_at",
  
    // from maintenance_areas ma
    "maintenance_area_name",
    "maintenance_area_code",
    "maintenance_area_email",
    "maintenance_area_contact_person",
    "maintenance_area_contact_number",
    "maintenance_area_latitude",
    "maintenance_area_longitude",
    "maintenance_area_area_type_id",
    "maintenance_area_parent_id",
    "maintenance_area_status",
    "maintenance_area_created_at",
    "maintenance_area_updated_at",
  
    // counts
    "total_count",
    "active_count",
    "inactive_count",
  ]
};

// Separate tables and views for better type safety
export const TABLES = {
  user_profiles: "user_profiles",
  employees: "employees",
  lookup_types: "lookup_types",
  rings: "rings",
  employee_designations: "employee_designations",
  maintenance_areas: "maintenance_areas",
  ofc_cables: "ofc_cables",
  ofc_connections: "ofc_connections",
  nodes: "nodes",
  systems: "systems",
  cpan_connections: "cpan_connections",
  cpan_systems: "cpan_systems",
  fiber_joint_connections: "fiber_joint_connections",
  fiber_joints: "fiber_joints",
  logical_fiber_paths: "logical_fiber_paths",
  maan_connections: "maan_connections",
  maan_systems: "maan_systems",
  management_ports: "management_ports",
  sdh_connections: "sdh_connections",
  sdh_node_associations: "sdh_node_associations",
  sdh_systems: "sdh_systems",
  system_connections: "system_connections",
  user_activity_logs: "user_activity_logs",
  vmux_connections: "vmux_connections",
  vmux_systems: "vmux_systems",
} as const;

// Define views separately
export const VIEWS = {
  v_cable_utilization: "v_cable_utilization",
  v_end_to_end_paths: "v_end_to_end_paths",
  v_nodes_complete: "v_nodes_complete",
  v_ofc_cables_complete: "v_ofc_cables_complete",
  v_ofc_connections_complete: "v_ofc_connections_complete",
  v_system_connections_complete: "v_system_connections_complete",
  v_systems_complete: "v_systems_complete",
  v_user_profiles_extended: "v_user_profiles_extended",
  v_lookup_types_with_count: "v_lookup_types_with_count",
  v_employee_designations_with_count: "v_employee_designations_with_count",
  v_maintenance_areas_with_count: "v_maintenance_areas_with_count",
  v_employees_with_count: "v_employees_with_count",
  v_rings_with_count: "v_rings_with_count",
} as const;

// For backward compatibility, export TABLE_NAMES as a union of tables and views
export const TABLE_NAMES = {
  ...TABLES,
  ...VIEWS,
} as const;
