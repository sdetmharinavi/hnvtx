import { toPgBoolean, toPgDate, toTitleCase } from '@/config/helper-functions';
import {
  ColumnMeta,
  ColumnTransform,
  GenericRow,
  TableMetaMap,
  TableName,
  TableNames,
  TableOrViewName,
  UploadMetaMap,
  UploadTableMeta,
} from '@/config/helper-types';
import { Tables } from '@/types/supabase-types';
import type { UploadConfig } from '@/stores/useUploadConfigStore';

export const UPLOAD_TABLE_META: UploadMetaMap = {
  employees: {
    uploadType: 'upsert',
    conflictColumn: 'employee_pers_no',
    isUploadEnabled: true,
  },
  user_profiles: {
    uploadType: 'upsert',
    conflictColumn: 'id',
    isUploadEnabled: true,
  },
  lookup_types: {
    uploadType: 'upsert',
    conflictColumn: 'id',
    isUploadEnabled: true,
  },
  rings: { uploadType: 'upsert', conflictColumn: 'id', isUploadEnabled: true },
  employee_designations: {
    uploadType: 'upsert',
    conflictColumn: 'id',
    isUploadEnabled: true,
  },
  maintenance_areas: {
    uploadType: 'upsert',
    conflictColumn: 'id',
    isUploadEnabled: true,
  },
  ofc_cables: {
    uploadType: 'upsert',
    conflictColumn: 'id',
    isUploadEnabled: true,
  },
  ofc_connections: {
    uploadType: 'upsert',
    conflictColumn: 'id',
    isUploadEnabled: true,
  },
  nodes: { uploadType: 'upsert', conflictColumn: 'id', isUploadEnabled: true },
  systems: {
    uploadType: 'upsert',
    conflictColumn: 'id',
    isUploadEnabled: true,
  },
};

// Per-table column metadata for UI/export and upload (only override where needed)
export const TABLE_COLUMN_META: TableMetaMap = {
  employees: {
    employee_dob: {
      title: 'Employee DOB',
      excelHeader: 'Employee DOB',
      transform: toPgDate,
      excelFormat: 'date',
    },
    employee_doj: {
      title: 'Employee DOJ',
      excelHeader: 'Employee DOJ',
      transform: toPgDate,
      excelFormat: 'date',
    },
    status: { title: 'Status', excelHeader: 'Status', transform: toPgBoolean },
  },
  lookup_types: {
    status: { transform: toPgBoolean },
    is_system_default: { transform: toPgBoolean },
  },
  rings: {
    status: { transform: toPgBoolean },
  },
  user_profiles: {
    date_of_birth: { transform: toPgDate, excelFormat: 'date' },
  },
  ofc_cables: {
    commissioned_on: { transform: toPgDate, excelFormat: 'date' },
    status: { transform: toPgBoolean },
  },
  ofc_connections: {
    en_dom: { transform: toPgDate, excelFormat: 'date' },
    sn_dom: { transform: toPgDate, excelFormat: 'date' },
    status: { transform: toPgBoolean },
  },
  nodes: {
    status: { transform: toPgBoolean },
  },
  systems: {
    commissioned_on: { transform: toPgDate, excelFormat: 'date' },
    status: { transform: toPgBoolean },
  },
};

// Build UI column configs (lightweight structure; consumer can enrich widths/formats)
export function buildColumnConfig<T extends TableOrViewName>(tableName: T) {
  const keys = TABLE_COLUMN_KEYS[
    tableName as keyof typeof TABLE_COLUMN_KEYS
  ] as unknown as readonly (keyof GenericRow<T> & string)[];
  const meta = (TABLE_COLUMN_META[tableName as TableName] || {}) as Record<string, ColumnMeta>;
  return keys.map((key) => {
    const m = meta[key] || {};
    const title = m.title ?? toTitleCase(key);
    return {
      key,
      dataIndex: key,
      title,
      excelFormat: m.excelFormat,
    };
  });
}
// Build upload config from SSOT
export function buildUploadConfig<T extends TableNames>(tableName: T) {
  type RowType = T extends TableName ? Tables<T> : Record<string, unknown>;
  type ColumnKey = keyof RowType & string;

  const tableColumnKeys = TABLE_COLUMN_KEYS as unknown as Record<TableNames, readonly string[]>;
  const keys = (tableColumnKeys[tableName] || []) as readonly ColumnKey[];
  const meta = (TABLE_COLUMN_META[tableName as TableName] || {}) as Partial<
    Record<ColumnKey, ColumnMeta>
  >;
  const tableMeta = (UPLOAD_TABLE_META as Partial<Record<TableNames, UploadTableMeta<TableName>>>)[
    tableName
  ];
  const uploadType = tableMeta?.uploadType ?? 'upsert';
  const conflictColumn = tableMeta?.conflictColumn as ColumnKey | undefined;
  const isUploadEnabled = tableMeta?.isUploadEnabled ?? true;

  const columnMapping = keys.map((key) => {
    const m = meta[key] || {};
    const excelHeader = m.excelHeader ?? toTitleCase(key);
    // Auto-infer transforms if not explicitly provided
    let transform = m.transform as ColumnTransform | undefined;
    if (!transform) {
      const k = String(key).toLowerCase();
      if (k.endsWith('_at') || k.endsWith('_on') || k.includes('date')) {
        transform = toPgDate;
      } else if (
        k.startsWith('is_') ||
        k.startsWith('has_') ||
        k.startsWith('can_') ||
        k.includes('enabled') ||
        k.includes('active') ||
        k === 'status'
      ) {
        transform = toPgBoolean;
      }
    }
    return {
      excelHeader,
      dbKey: key,
      transform,
    };
  });

  return {
    tableName,
    columnMapping,
    uploadType,
    conflictColumn,
    isUploadEnabled,
  } satisfies UploadConfig<T>;
}

/**
 * The single source of truth for the default columns to be displayed for each table.
 * This is the ONLY place you need to manually list column names.
 * TypeScript validates this entire object.
 */
export const TABLE_COLUMN_KEYS = {
  // We list all keys for each table here.
  user_profiles: [
    'id',
    'first_name',
    'last_name',
    'phone_number',
    'role',
    'designation',
    'status',
    'avatar_url',
    'date_of_birth',
    'address',
    'preferences',
    'created_at',
    'updated_at',
  ],
  lookup_types: [
    'id',
    'category',
    'name',
    'code',
    'description',
    'sort_order',
    'status',
    'is_system_default',
    'created_at',
    'updated_at',
  ],
  maintenance_areas: [
    'id',
    'code',
    'name',
    'address',
    'email',
    'contact_person',
    'contact_number',
    'latitude',
    'longitude',
    'area_type_id',
    'parent_id',
    'status',
    'created_at',
    'updated_at',
  ],
  employee_designations: ['id', 'name', 'parent_id', 'status', 'created_at', 'updated_at'],
  employees: [
    'id',
    'employee_pers_no',
    'employee_name',
    'employee_email',
    'employee_dob',
    'employee_doj',
    'employee_contact',
    'employee_addr',
    'employee_designation_id',
    'maintenance_terminal_id',
    'status',
    'remark',
    'created_at',
    'updated_at',
  ],
  rings: [
    'id',
    'name',
    'total_nodes',
    'description',
    'ring_type_id',
    'maintenance_terminal_id',
    'status',
    'created_at',
    'updated_at',
  ],
  nodes: [
    'id',
    'name',
    'node_type_id',
    'maintenance_terminal_id',
    'latitude',
    'longitude',
    'status',
    'remark',
    'created_at',
    'updated_at',
  ],
  ofc_cables: [
    'id',
    'route_name',
    'capacity',
    'ofc_type_id', // Correct: references lookup_types table
    'transnet_id',
    'transnet_rkm',
    'current_rkm',
    'ofc_owner_id', // Correct: references lookup_types table
    'asset_no',
    'maintenance_terminal_id', // Correct: references maintenance_areas table
    'commissioned_on',
    'remark',
    'sn_id', // Correct: references nodes table
    'en_id', // Correct: references nodes table
    'status',
    'created_at',
    'updated_at',
  ],
  systems: [
    'id',
    'system_name',
    's_no',
    'node_id',
    'system_type_id',
    'ip_address',
    'maintenance_terminal_id',
    'commissioned_on',
    'status',
    'remark',
    'created_at',
    'updated_at',
  ],
  ofc_connections: [
    'id',
    'ofc_id',
    'logical_path_id',
    'system_id',
    'fiber_no_sn',
    'fiber_no_en',
    'updated_fiber_no_sn',
    'updated_fiber_no_en',
    'path_segment_order',
    'connection_type',
    'connection_category',
    'source_port',
    'destination_port',
    'en_dom',
    'sn_dom',
    'otdr_distance_en_km',
    'otdr_distance_sn_km',
    'sn_power_dbm',
    'en_power_dbm',
    'route_loss_db',
    'status',
    'remark',
    'created_at',
    'updated_at',
  ],
  // 'maan_connections' and 'cpan_connections' refer to 'sfp_based_connections'
  sfp_based_connections: [
    'system_connection_id',
    'bandwidth_allocated_mbps',
    'customer_name',
    'fiber_in',
    'fiber_out',
    'sfp_capacity',
    'sfp_port',
    'sfp_serial_no',
    'sfp_type_id',
  ],
  // 'maan_systems' and 'cpan_systems' are not directly present as tables in your types.
  // Assuming they might be specialized systems or a view not provided.
  // For now, I'll remove them or if they refer to `systems` with specific types, you need to clarify.
  // I will skip them for now.
  management_ports: [
    'id',
    'name',
    'port_no',
    'commissioned_on',
    'node_id',
    'system_id',
    'status',
    'remark',
    'created_at',
    'updated_at',
  ],
  sdh_connections: [
    'system_connection_id',
    'stm_no',
    'carrier',
    'a_customer',
    'a_slot',
    'b_customer',
    'b_slot',
  ],
  sdh_node_associations: ['id', 'sdh_system_id', 'node_id', 'node_position', 'node_ip'],
  sdh_systems: ['system_id', 'make', 'gne'],
  system_connections: [
    'id',
    'system_id',
    'sn_id',
    'en_id',
    'connected_system_id',
    'media_type_id',
    'sn_interface',
    'en_interface',
    'sn_ip',
    'en_ip',
    'vlan',
    'bandwidth_mbps',
    'commissioned_on',
    'status',
    'remark',
    'created_at',
    'updated_at',
  ],
  vmux_connections: ['system_connection_id', 'subscriber', 'channel', 'c_code', 'tk'],
  vmux_systems: ['system_id', 'vm_id'],
  fiber_joints: [
    'id',
    'joint_name',
    'joint_category',
    'joint_type',
    'node_id',
    'maintenance_area_id',
    'latitude',
    'longitude',
    'location_description',
    'installed_date',
    'status',
    'remark',
    'created_at',
    'updated_at',
  ],
  logical_fiber_paths: [
    'bandwidth_gbps',
    'commissioned_date',
    'created_at',
    'destination_port',
    'destination_system_id',
    'id',
    'operational_status_id',
    'path_name',
    'path_type_id',
    'remark',
    'service_type',
    'source_port',
    'source_system_id',
    'total_distance_km',
    'total_loss_db',
    'updated_at',
    'wavelength_nm',
  ],
  // 'fiber_joint_connections' is not directly present as a table in your types.
  // Assuming it might be a junction table or a view not provided.
  // I will skip it for now.
  user_activity_logs: [
    'id',
    'created_at',
    'user_id',
    'user_role',
    'action_type',
    'table_name',
    'record_id',
    'old_data',
    'new_data',
    'details',
  ],
  files: [
    'id',
    'file_name',
    'file_route',
    'file_size',
    'file_type',
    'file_url',
    'folder_id',
    'uploaded_at',
    'user_id',
  ],
  folders: ['id', 'name', 'user_id', 'created_at'],
  ring_based_systems: ['maintenance_area_id', 'ring_id', 'system_id'],
  logical_path_segments: [
    'created_at',
    'fiber_joint_id',
    'id',
    'logical_path_id',
    'ofc_cable_id',
    'path_order',
  ],

  // ===== Views =====
  v_cable_utilization: [
    'cable_id',
    'route_name',
    'capacity',
    'used_fibers',
    'available_fibers',
    'utilization_percent',
  ],
  v_end_to_end_paths: [
    'path_id',
    'path_name',
    'source_system_id',
    'destination_system_id',
    'operational_status',
    'segment_count',
    'route_names',
    'total_distance_km',
    'total_loss_db',
  ],
  v_ofc_cables_complete: [
    'id',
    'route_name',
    'sn_id',
    'en_id',
    'capacity',
    'ofc_type_id',
    'ofc_type_name',
    'ofc_type_code',
    'ofc_owner_id',
    'ofc_owner_name',
    'ofc_owner_code',
    'asset_no',
    'transnet_id',
    'transnet_rkm',
    'current_rkm',
    'maintenance_terminal_id',
    'maintenance_area_name',
    'maintenance_area_code',
    'commissioned_on',
    'status',
    'remark',
    'created_at',
    'updated_at',
    'total_count',
    'active_count',
    'inactive_count',
  ],
  v_nodes_complete: [
    'id',
    'name',
    'node_type_id',
    'node_type_name',
    'node_type_code',
    'maintenance_terminal_id',
    'maintenance_area_name',
    'maintenance_area_code',
    'maintenance_area_type_name',
    'latitude',
    'longitude',
    'status',
    'remark',
    'created_at',
    'updated_at',
    'total_count',
    'active_count',
    'inactive_count',
  ],
  v_ofc_connections_complete: [
    'fiber_no_sn',
    'updated_fiber_no_sn',
    'otdr_distance_sn_km',
    'sn_power_dbm',
    'sn_dom',
    'fiber_no_en',
    'updated_fiber_no_en',
    'otdr_distance_en_km',
    'en_power_dbm',
    'en_dom',
    'route_loss_db',
    'connection_type',
    'maintenance_area_name',
    'remark',
    'status',
    'active_count',
    'inactive_count',
    'ofc_route_name',
    'ofc_type_name',
    'connection_category',
    'system_name',
    'system_id',
    'source_port',
    'destination_port',
    'path_segment_order',
    'logical_path_id',
    'sn_name',
    'en_name',
    'sn_id',
    'en_id',
    'total_count',
    'created_at',
    'updated_at',
    'ofc_id',
    'id',
  ],
  v_system_connections_complete: [
    'active_count',
    'bandwidth_allocated_mbps',
    'bandwidth_mbps',
    'commissioned_on',
    'connected_system_name',
    'connected_system_type_name',
    'created_at',
    'customer_name',
    'en_interface',
    'en_ip',
    'en_name',
    'en_node_name',
    'fiber_in',
    'fiber_out',
    'id',
    'inactive_count',
    'media_type_name',
    'remark',
    'sdh_a_customer',
    'sdh_a_slot',
    'sdh_b_customer',
    'sdh_b_slot',
    'sdh_carrier',
    'sdh_stm_no',
    'sfp_capacity',
    'sfp_port',
    'sfp_serial_no',
    'sfp_type_name',
    'sn_interface',
    'sn_ip',
    'sn_name',
    'sn_node_name',
    'status',
    'system_id',
    'system_name',
    'system_type_name',
    'total_count',
    'updated_at',
    'vlan',
    'vmux_c_code',
    'vmux_channel',
    'vmux_subscriber',
    'vmux_tk',
  ],
  v_systems_complete: [
    'active_count',
    'commissioned_on',
    'created_at',
    'id',
    'inactive_count',
    'ip_address',
    'latitude',
    'longitude',
    'maintenance_terminal_id',
    'node_id',
    'node_name',
    'remark',
    'ring_id',
    'ring_logical_area_name',
    's_no',
    'sdh_gne',
    'sdh_make',
    'status',
    'system_category',
    'system_maintenance_terminal_name',
    'system_name',
    'system_type_code',
    'system_type_id',
    'system_type_name',
    'total_count',
    'updated_at',
    'vmux_vm_id',
  ],
  v_user_profiles_extended: [
    'id',
    'email',
    'last_sign_in_at',
    'created_at',
    'updated_at',
    'auth_updated_at',
    'is_super_admin',
    'is_email_verified',
    'email_confirmed_at',
    'is_phone_verified',
    'phone_confirmed_at',
    'first_name',
    'last_name',
    'full_name',
    'avatar_url',
    'phone_number',
    'date_of_birth',
    'address',
    'preferences',
    'role',
    'designation',
    'status',
    'raw_user_meta_data',
    'raw_app_meta_data',
    'computed_status',
    'account_age_days',
    'last_activity_period',
  ],
  v_lookup_types: [
    'id',
    'category',
    'name',
    'code',
    'description',
    'sort_order',
    'status',
    'is_system_default',
    'created_at',
    'updated_at',
    'total_count',
    'active_count',
    'inactive_count',
  ],
  v_employee_designations: [
    'id',
    'name',
    'parent_id',
    'status',
    'created_at',
    'updated_at',
    'total_count',
    'active_count',
    'inactive_count',
  ],
  v_maintenance_areas: [
    'id',
    'code',
    'name',
    'address',
    'email',
    'contact_person',
    'contact_number',
    'latitude',
    'longitude',
    'area_type_id',
    'parent_id',
    'status',
    'created_at',
    'updated_at',
    'total_count',
    'active_count',
    'inactive_count',
    'maintenance_area_type_category',
    'maintenance_area_type_code',
    'maintenance_area_type_created_at',
    'maintenance_area_type_is_system_default',
    'maintenance_area_type_name',
    'maintenance_area_type_sort_order',
    'maintenance_area_type_status',
    'maintenance_area_type_updated_at',
  ],
  v_employees: [
    'id',
    'employee_pers_no',
    'employee_name',
    'employee_email',
    'employee_dob',
    'employee_doj',
    'employee_contact',
    'employee_addr',
    'employee_designation_id',
    'employee_designation_name',
    'maintenance_terminal_id',
    'remark',
    'status',
    'created_at',
    'updated_at',
    'total_count',
    'active_count',
    'inactive_count',
  ],
  v_rings: [
    // from rings r.*
    'id',
    'name',
    'description',
    'ring_type_id',
    'maintenance_terminal_id',
    'total_nodes',
    'status',
    'created_at',
    'updated_at',

    // from lookup_types lt_ring
    'ring_type_name',
    'ring_type_code',
    'ring_type_category',
    'ring_type_sort_order',
    'ring_type_is_system_default',
    'ring_type_status',
    'ring_type_created_at',
    'ring_type_updated_at',

    // from maintenance_areas ma
    'maintenance_area_name',
    'maintenance_area_code',
    'maintenance_area_email',
    'maintenance_area_contact_person',
    'maintenance_area_contact_number',
    'maintenance_area_latitude',
    'maintenance_area_longitude',
    'maintenance_area_area_type_id',
    'maintenance_area_parent_id',
    'maintenance_area_status',
    'maintenance_area_created_at',
    'maintenance_area_updated_at',

    // counts
    'total_count',
    'active_count',
    'inactive_count',
  ],
  v_system_ring_paths_detailed: [
    'created_at',
    'end_node_id',
    'end_node_name',
    'id',
    'logical_path_id',
    'ofc_cable_id',
    'path_name',
    'path_order',
    'route_name',
    'source_system_id',
    'start_node_id',
    'start_node_name',
  ],
} as const satisfies Record<string, readonly string[]>;

// Separate tables and views for better type safety
export const TABLES = {
  user_profiles: 'user_profiles',
  employees: 'employees',
  lookup_types: 'lookup_types',
  rings: 'rings',
  employee_designations: 'employee_designations',
  maintenance_areas: 'maintenance_areas',
  ofc_cables: 'ofc_cables',
  ofc_connections: 'ofc_connections',
  nodes: 'nodes',
  systems: 'systems',
  // 'cpan_connections' is SFP based connections
  sfp_based_connections: 'sfp_based_connections',
  // 'cpan_systems' is not in types, removed
  // 'fiber_joint_connections' is not in types, removed
  fiber_joints: 'fiber_joints',
  logical_fiber_paths: 'logical_fiber_paths',
  logical_path_segments: 'logical_path_segments',
  // 'maan_connections' is SFP based connections
  management_ports: 'management_ports',
  sdh_connections: 'sdh_connections',
  sdh_node_associations: 'sdh_node_associations',
  sdh_systems: 'sdh_systems',
  system_connections: 'system_connections',
  user_activity_logs: 'user_activity_logs',
  vmux_connections: 'vmux_connections',
  vmux_systems: 'vmux_systems',
  files: 'files',
  folders: 'folders',
  ring_based_systems: 'ring_based_systems',
} as const;

// Define views separately
export const VIEWS = {
  v_cable_utilization: 'v_cable_utilization',
  v_end_to_end_paths: 'v_end_to_end_paths',
  v_nodes_complete: 'v_nodes_complete',
  v_ofc_cables_complete: 'v_ofc_cables_complete',
  v_ofc_connections_complete: 'v_ofc_connections_complete',
  v_system_connections_complete: 'v_system_connections_complete',
  v_systems_complete: 'v_systems_complete',
  v_user_profiles_extended: 'v_user_profiles_extended',
  v_lookup_types: 'v_lookup_types',
  v_employee_designations: 'v_employee_designations',
  v_maintenance_areas: 'v_maintenance_areas',
  v_employees: 'v_employees',
  v_rings: 'v_rings',
  v_system_ring_paths_detailed: 'v_system_ring_paths_detailed',
} as const;

// For backward compatibility, export TABLE_NAMES as a union of tables and views
export const TABLE_NAMES = {
  ...TABLES,
  ...VIEWS,
} as const;
