import { toPgBoolean, toPgDate, toTitleCase } from "@/config/helper-functions";
import { ColumnMeta, TableMetaMap, UploadMetaMap } from "@/config/helper-types";
import { Tables } from "@/types/supabase-types";
import type { UploadConfig } from "@/stores/useUploadConfigStore";
import { PublicTableName, PublicTableOrViewName, Row } from "@/hooks/database";

export const UPLOAD_TABLE_META: UploadMetaMap = {
  employees: {
    uploadType: "upsert",
    conflictColumn: "employee_pers_no",
    isUploadEnabled: true,
  },
  user_profiles: {
    uploadType: "upsert",
    conflictColumn: "id",
    isUploadEnabled: true,
  },
  lookup_types: {
    uploadType: "upsert",
    conflictColumn: "id",
    isUploadEnabled: true,
  },
  rings: { uploadType: "upsert", conflictColumn: "id", isUploadEnabled: true },
  employee_designations: {
    uploadType: "upsert",
    conflictColumn: "id",
    isUploadEnabled: true,
  },
  maintenance_areas: {
    uploadType: "upsert",
    conflictColumn: "id",
    isUploadEnabled: true,
  },
  ofc_cables: {
    uploadType: "upsert",
    conflictColumn: "id",
    isUploadEnabled: true,
  },
  ofc_connections: {
    uploadType: "upsert",
    conflictColumn: "id",
    isUploadEnabled: true,
  },
  nodes: { uploadType: "upsert", conflictColumn: "id", isUploadEnabled: true },
  systems: {
    uploadType: "upsert",
    conflictColumn: "id",
    isUploadEnabled: true,
  },
};

export const TABLE_COLUMN_META: TableMetaMap = {
  employees: {
    employee_dob: {
      title: "Employee DOB",
      excelHeader: "Employee DOB",
      transform: toPgDate,
      excelFormat: "date",
    },
    employee_doj: {
      title: "Employee DOJ",
      excelHeader: "Employee DOJ",
      transform: toPgDate,
      excelFormat: "date",
    },
    status: { title: "Status", excelHeader: "Status", transform: toPgBoolean },
  },
  lookup_types: {
    status: { transform: toPgBoolean },
    is_system_default: { transform: toPgBoolean },
  },
  rings: { status: { transform: toPgBoolean } },
  user_profiles: {
    date_of_birth: { transform: toPgDate, excelFormat: "date" },
  },
  ofc_cables: {
    commissioned_on: { transform: toPgDate, excelFormat: "date" },
    status: { transform: toPgBoolean },
  },
  ofc_connections: {
    en_dom: { transform: toPgDate, excelFormat: "date" },
    sn_dom: { transform: toPgDate, excelFormat: "date" },
    status: { transform: toPgBoolean },
  },
  nodes: { status: { transform: toPgBoolean } },
  systems: {
    commissioned_on: { transform: toPgDate, excelFormat: "date" },
    status: { transform: toPgBoolean },
  },
};

export function buildColumnConfig<T extends PublicTableOrViewName>(tableName: T) {
  const keys = TABLE_COLUMN_KEYS[
    tableName as keyof typeof TABLE_COLUMN_KEYS
  ] as unknown as readonly (keyof Row<T> & string)[];
  const meta = (TABLE_COLUMN_META[tableName as PublicTableName] || {}) as Record<
    string,
    ColumnMeta
  >;
  return keys.map((key) => {
    const m = meta[key] || {};
    const title = m.title ?? toTitleCase(key);
    return { key, dataIndex: key, title, excelFormat: m.excelFormat };
  });
}
export function buildUploadConfig<T extends PublicTableName>(tableName: T) {
  type RowType = Tables<T>;
  type ColumnKey = keyof RowType & string;
  const tableColumnKeys = TABLE_COLUMN_KEYS as Record<string, readonly string[]>;
  const keys = (tableColumnKeys[tableName] || []) as readonly ColumnKey[];
  const meta = (TABLE_COLUMN_META[tableName] || {}) as Partial<Record<ColumnKey, ColumnMeta>>;
  const tableMeta = UPLOAD_TABLE_META[tableName];
  const uploadType = tableMeta?.uploadType ?? "upsert";
  const conflictColumn = tableMeta?.conflictColumn;
  const isUploadEnabled = tableMeta?.isUploadEnabled ?? true;

  const columnMapping = keys.map((key) => {
    const m = meta[key] || {};
    const excelHeader = m.excelHeader ?? toTitleCase(key);
    let transform = m.transform;
    if (!transform) {
      const k = String(key).toLowerCase();
      if (k.endsWith("_at") || k.endsWith("_on") || k.includes("date")) {
        transform = toPgDate;
      } else if (
        k.startsWith("is_") ||
        k.startsWith("has_") ||
        k.startsWith("can_") ||
        k.includes("enabled") ||
        k.includes("active") ||
        k === "status"
      ) {
        transform = toPgBoolean;
      }
    }
    return { excelHeader, dbKey: key, transform };
  });

  return {
    tableName,
    columnMapping,
    uploadType,
    conflictColumn,
    isUploadEnabled,
  } satisfies UploadConfig<T>;
}

export type ValidatedColumnKeys = {
  [T in PublicTableOrViewName]: { [K in keyof Row<T>]: K };
};

const TABLE_COLUMN_OBJECTS = {
  // ==================== Core Tables ====================
  user_profiles: {
    id: "id",
    first_name: "first_name",
    last_name: "last_name",
    phone_number: "phone_number",
    role: "role",
    designation: "designation",
    status: "status",
    avatar_url: "avatar_url",
    date_of_birth: "date_of_birth",
    address: "address",
    preferences: "preferences",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  lookup_types: {
    id: "id",
    category: "category",
    name: "name",
    code: "code",
    description: "description",
    sort_order: "sort_order",
    is_system_default: "is_system_default",
    is_ring_based: "is_ring_based",
    is_sdh: "is_sdh",
    status: "status",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  maintenance_areas: {
    id: "id",
    name: "name",
    contact_person: "contact_person",
    contact_number: "contact_number",
    email: "email",
    latitude: "latitude",
    longitude: "longitude",
    address: "address",
    code: "code",
    status: "status",
    area_type_id: "area_type_id",
    parent_id: "parent_id",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  employee_designations: {
    id: "id",
    name: "name",
    parent_id: "parent_id",
    status: "status",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  employees: {
    id: "id",
    employee_pers_no: "employee_pers_no",
    employee_name: "employee_name",
    employee_email: "employee_email",
    employee_dob: "employee_dob",
    employee_doj: "employee_doj",
    employee_contact: "employee_contact",
    employee_addr: "employee_addr",
    employee_designation_id: "employee_designation_id",
    maintenance_terminal_id: "maintenance_terminal_id",
    status: "status",
    remark: "remark",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  rings: {
    id: "id",
    name: "name",
    total_nodes: "total_nodes",
    description: "description",
    ring_type_id: "ring_type_id",
    maintenance_terminal_id: "maintenance_terminal_id",
    status: "status",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  nodes: {
    id: "id",
    name: "name",
    node_type_id: "node_type_id",
    maintenance_terminal_id: "maintenance_terminal_id",
    latitude: "latitude",
    longitude: "longitude",
    status: "status",
    remark: "remark",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  ofc_cables: {
    id: "id",
    route_name: "route_name",
    capacity: "capacity",
    ofc_type_id: "ofc_type_id",
    transnet_id: "transnet_id",
    transnet_rkm: "transnet_rkm",
    current_rkm: "current_rkm",
    ofc_owner_id: "ofc_owner_id",
    asset_no: "asset_no",
    maintenance_terminal_id: "maintenance_terminal_id",
    commissioned_on: "commissioned_on",
    remark: "remark",
    sn_id: "sn_id",
    en_id: "en_id",
    status: "status",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  files: {
    id: "id",
    file_name: "file_name",
    file_route: "file_route",
    file_size: "file_size",
    file_type: "file_type",
    file_url: "file_url",
    folder_id: "folder_id",
    uploaded_at: "uploaded_at",
    user_id: "user_id",
  },
  folders: {
    id: "id",
    name: "name",
    user_id: "user_id",
    created_at: "created_at",
  },

  // ==================== System Tables ====================
  systems: {
    id: "id",
    system_name: "system_name",
    s_no: "s_no",
    node_id: "node_id",
    system_type_id: "system_type_id",
    ip_address: "ip_address",
    maintenance_terminal_id: "maintenance_terminal_id",
    commissioned_on: "commissioned_on",
    status: "status",
    remark: "remark",
    created_at: "created_at",
    updated_at: "updated_at",
    make: "make",
  },
  system_connections: {
    id: "id",
    system_id: "system_id",
    sn_id: "sn_id",
    en_id: "en_id",
    connected_system_id: "connected_system_id",
    media_type_id: "media_type_id",
    sn_interface: "sn_interface",
    en_interface: "en_interface",
    sn_ip: "sn_ip",
    en_ip: "en_ip",
    vlan: "vlan",
    bandwidth_mbps: "bandwidth_mbps",
    commissioned_on: "commissioned_on",
    status: "status",
    remark: "remark",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  management_ports: {
    id: "id",
    name: "name",
    port_no: "port_no",
    commissioned_on: "commissioned_on",
    node_id: "node_id",
    system_id: "system_id",
    status: "status",
    remark: "remark",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  ring_based_systems: {
    system_id: "system_id",
    ring_id: "ring_id",
    maintenance_area_id: "maintenance_area_id",
  },
  sfp_based_connections: {
    system_connection_id: "system_connection_id",
    bandwidth_allocated_mbps: "bandwidth_allocated_mbps",
    customer_name: "customer_name",
    fiber_in: "fiber_in",
    fiber_out: "fiber_out",
    sfp_capacity: "sfp_capacity",
    sfp_port: "sfp_port",
    sfp_serial_no: "sfp_serial_no",
    sfp_type_id: "sfp_type_id",
  },
  sdh_systems: {
    system_id: "system_id",
    gne: "gne",
  },
  sdh_connections: {
    system_connection_id: "system_connection_id",
    stm_no: "stm_no",
    carrier: "carrier",
    a_slot: "a_slot",
    a_customer: "a_customer",
    b_slot: "b_slot",
    b_customer: "b_customer",
  },
  sdh_node_associations: {
    id: "id",
    sdh_system_id: "sdh_system_id",
    node_id: "node_id",
    node_position: "node_position",
    node_ip: "node_ip",
  },
  vmux_systems: {
    system_id: "system_id",
    vm_id: "vm_id",
  },
  vmux_connections: {
    system_connection_id: "system_connection_id",
    subscriber: "subscriber",
    c_code: "c_code",
    channel: "channel",
    tk: "tk",
  },
  ofc_connections: {
    id: "id",
    ofc_id: "ofc_id",
    fiber_no_sn: "fiber_no_sn",
    fiber_no_en: "fiber_no_en",
    updated_fiber_no_sn: "updated_fiber_no_sn",
    updated_fiber_no_en: "updated_fiber_no_en",
    updated_sn_id: "updated_sn_id",
    updated_en_id: "updated_en_id",
    otdr_distance_sn_km: "otdr_distance_sn_km",
    sn_dom: "sn_dom",
    sn_power_dbm: "sn_power_dbm",
    system_id: "system_id",
    otdr_distance_en_km: "otdr_distance_en_km",
    en_dom: "en_dom",
    en_power_dbm: "en_power_dbm",
    route_loss_db: "route_loss_db",
    logical_path_id: "logical_path_id",
    fiber_role: "fiber_role",
    path_segment_order: "path_segment_order",
    source_port: "source_port",
    destination_port: "destination_port",
    connection_category: "connection_category",
    connection_type: "connection_type",
    remark: "remark",
    status: "status",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  cable_segments: {
    id: "id",
    original_cable_id: "original_cable_id",
    segment_order: "segment_order",
    start_node_id: "start_node_id",
    end_node_id: "end_node_id",
    start_node_type: "start_node_type",
    end_node_type: "end_node_type",
    distance_km: "distance_km",
    fiber_count: "fiber_count",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  fiber_splices: {
    id: "id",
    jc_id: "jc_id",
    incoming_segment_id: "incoming_segment_id",
    incoming_fiber_no: "incoming_fiber_no",
    outgoing_segment_id: "outgoing_segment_id",
    outgoing_fiber_no: "outgoing_fiber_no",
    splice_type_id: "splice_type_id",
    logical_path_id: "logical_path_id",
    loss_db: "loss_db",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  junction_closures: {
    id: "id",
    node_id: "node_id",
    ofc_cable_id: "ofc_cable_id",
    position_km: "position_km",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  logical_paths: {
    id: "id",
    name: "name",
    ring_id: "ring_id",
    start_node_id: "start_node_id",
    end_node_id: "end_node_id",
    status: "status",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  logical_fiber_paths: {
    id: "id",
    path_name: "path_name",
    working_path_id: "working_path_id",
    path_role: "path_role",
    path_type_id: "path_type_id",
    source_system_id: "source_system_id",
    destination_system_id: "destination_system_id",
    operational_status_id: "operational_status_id",
    source_port: "source_port",
    destination_port: "destination_port",
    total_distance_km: "total_distance_km",
    total_loss_db: "total_loss_db",
    service_type: "service_type",
    bandwidth_gbps: "bandwidth_gbps",
    wavelength_nm: "wavelength_nm",
    commissioned_date: "commissioned_date",
    remark: "remark",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  logical_path_segments: {
    id: "id",
    logical_path_id: "logical_path_id",
    ofc_cable_id: "ofc_cable_id",
    path_order: "path_order",
    created_at: "created_at",
    updated_at: "updated_at",
  },

  // ==================== Views ====================
  v_cable_utilization: {
    cable_id: "cable_id",
    route_name: "route_name",
    capacity: "capacity",
    used_fibers: "used_fibers",
    available_fibers: "available_fibers",
    utilization_percent: "utilization_percent",
  },
  v_end_to_end_paths: {
    path_id: "path_id",
    path_name: "path_name",
    source_system_id: "source_system_id",
    destination_system_id: "destination_system_id",
    operational_status: "operational_status",
    segment_count: "segment_count",
    route_names: "route_names",
    total_distance_km: "total_distance_km",
    total_loss_db: "total_loss_db",
  },
  v_ofc_cables_complete: {
    id: "id",
    route_name: "route_name",
    sn_id: "sn_id",
    en_id: "en_id",
    sn_name: "sn_name",
    en_name: "en_name",
    sn_node_type_name: "sn_node_type_name",
    en_node_type_name: "en_node_type_name",
    capacity: "capacity",
    ofc_type_id: "ofc_type_id",
    ofc_type_name: "ofc_type_name",
    ofc_type_code: "ofc_type_code",
    ofc_owner_id: "ofc_owner_id",
    ofc_owner_name: "ofc_owner_name",
    ofc_owner_code: "ofc_owner_code",
    asset_no: "asset_no",
    transnet_id: "transnet_id",
    transnet_rkm: "transnet_rkm",
    current_rkm: "current_rkm",
    maintenance_terminal_id: "maintenance_terminal_id",
    maintenance_area_name: "maintenance_area_name",
    maintenance_area_code: "maintenance_area_code",
    commissioned_on: "commissioned_on",
    status: "status",
    remark: "remark",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  v_nodes_complete: {
    id: "id",
    name: "name",
    latitude: "latitude",
    longitude: "longitude",
    node_type_name: "node_type_name",
    node_type_code: "node_type_code",
    maintenance_area_name: "maintenance_area_name",
    remark: "remark",
    status: "status",
    node_type_id: "node_type_id",
    maintenance_terminal_id: "maintenance_terminal_id",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  v_ofc_connections_complete: {
    id: "id",
    ofc_route_name: "ofc_route_name",
    updated_sn_name: "updated_sn_name",
    updated_fiber_no_sn: "updated_fiber_no_sn",
    otdr_distance_sn_km: "otdr_distance_sn_km",
    sn_power_dbm: "sn_power_dbm",
    sn_dom: "sn_dom",
    updated_en_name: "updated_en_name",
    updated_fiber_no_en: "updated_fiber_no_en",
    otdr_distance_en_km: "otdr_distance_en_km",
    en_power_dbm: "en_power_dbm",
    en_dom: "en_dom",
    route_loss_db: "route_loss_db",
    ofc_type_name: "ofc_type_name",
    system_name: "system_name",
    source_port: "source_port",
    destination_port: "destination_port",
    maintenance_area_name: "maintenance_area_name",
    connection_category: "connection_category",
    connection_type: "connection_type",
    fiber_role: "fiber_role",
    remark: "remark",
    status: "status",
    sn_name: "sn_name",
    en_name: "en_name",
    fiber_no_sn: "fiber_no_sn",
    fiber_no_en: "fiber_no_en",
    path_segment_order: "path_segment_order",
    updated_at: "updated_at",
    created_at: "created_at",
    logical_path_id: "logical_path_id",
    updated_sn_id: "updated_sn_id",
    updated_en_id: "updated_en_id",
    system_id: "system_id",
    sn_id: "sn_id",
    en_id: "en_id",
    ofc_id: "ofc_id",
  },
  v_system_connections_complete: {
    id: "id",
    system_id: "system_id",
    system_name: "system_name",
    system_type_name: "system_type_name",
    sn_name: "sn_name",
    en_name: "en_name",
    sn_node_name: "sn_node_name",
    en_node_name: "en_node_name",
    media_type_id: "media_type_id",
    media_type_name: "media_type_name",
    bandwidth_mbps: "bandwidth_mbps",
    customer_name: "customer_name",
    status: "status",
    connected_system_id: "connected_system_id",
    sn_id: "sn_id",
    en_id: "en_id",
    sfp_type_id: "sfp_type_id",
    bandwidth_allocated_mbps: "bandwidth_allocated_mbps",
    commissioned_on: "commissioned_on",
    connected_system_name: "connected_system_name",
    connected_system_type_name: "connected_system_type_name",
    created_at: "created_at",
    en_interface: "en_interface",
    en_ip: "en_ip",
    fiber_in: "fiber_in",
    fiber_out: "fiber_out",
    remark: "remark",
    sdh_a_customer: "sdh_a_customer",
    sdh_a_slot: "sdh_a_slot",
    sdh_b_customer: "sdh_b_customer",
    sdh_b_slot: "sdh_b_slot",
    sdh_carrier: "sdh_carrier",
    sdh_stm_no: "sdh_stm_no",
    sfp_capacity: "sfp_capacity",
    sfp_port: "sfp_port",
    sfp_serial_no: "sfp_serial_no",
    sfp_type_name: "sfp_type_name",
    sn_interface: "sn_interface",
    sn_ip: "sn_ip",
    updated_at: "updated_at",
    vlan: "vlan",
    vmux_c_code: "vmux_c_code",
    vmux_channel: "vmux_channel",
    vmux_subscriber: "vmux_subscriber",
    vmux_tk: "vmux_tk",
  },
  v_systems_complete: {
    id: "id",
    system_name: "system_name",
    system_type_name: "system_type_name",
    node_name: "node_name",
    node_type_name: "node_type_name",
    ip_address: "ip_address",
    status: "status",
    commissioned_on: "commissioned_on",
    is_ring_based: "is_ring_based",
    is_sdh: "is_sdh",
    ring_id: "ring_id",
    system_type_id: "system_type_id",
    node_id: "node_id",
    maintenance_terminal_id: "maintenance_terminal_id",
    make: "make",
    remark: "remark",
    s_no: "s_no",
    latitude: "latitude",
    longitude: "longitude",
    ring_logical_area_name: "ring_logical_area_name",
    sdh_gne: "sdh_gne",
    system_category: "system_category",
    system_maintenance_terminal_name: "system_maintenance_terminal_name",
    system_type_code: "system_type_code",
    updated_at: "updated_at",
    created_at: "created_at",
    vmux_vm_id: "vmux_vm_id",
  },
  v_user_profiles_extended: {
    id: "id",
    email: "email",
    full_name: "full_name",
    role: "role",
    status: "status",
    last_sign_in_at: "last_sign_in_at",
    is_email_verified: "is_email_verified",
    created_at: "created_at",
    updated_at: "updated_at",
    account_age_days: "account_age_days",
    address: "address",
    auth_updated_at: "auth_updated_at",
    avatar_url: "avatar_url",
    computed_status: "computed_status",
    date_of_birth: "date_of_birth",
    designation: "designation",
    email_confirmed_at: "email_confirmed_at",
    first_name: "first_name",
    is_phone_verified: "is_phone_verified",
    is_super_admin: "is_super_admin",
    last_activity_period: "last_activity_period",
    last_name: "last_name",
    phone_confirmed_at: "phone_confirmed_at",
    phone_number: "phone_number",
    preferences: "preferences",
    raw_app_meta_data: "raw_app_meta_data",
    raw_user_meta_data: "raw_user_meta_data",
  },
  v_lookup_types: {
    id: "id",
    category: "category",
    name: "name",
    code: "code",
    description: "description",
    sort_order: "sort_order",
    status: "status",
    is_system_default: "is_system_default",
    is_ring_based: "is_ring_based",
    is_sdh: "is_sdh",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  v_employee_designations: {
    id: "id",
    name: "name",
    parent_id: "parent_id",
    status: "status",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  v_maintenance_areas: {
    id: "id",
    code: "code",
    name: "name",
    address: "address",
    email: "email",
    contact_person: "contact_person",
    contact_number: "contact_number",
    latitude: "latitude",
    longitude: "longitude",
    area_type_id: "area_type_id",
    parent_id: "parent_id",
    status: "status",
    created_at: "created_at",
    updated_at: "updated_at",
    maintenance_area_type_name: "maintenance_area_type_name",
    maintenance_area_type_code: "maintenance_area_type_code",
  },
  v_employees: {
    id: "id",
    employee_name: "employee_name",
    employee_contact: "employee_contact",
    employee_email: "employee_email",
    employee_pers_no: "employee_pers_no",
    employee_designation_name: "employee_designation_name",
    employee_dob: "employee_dob",
    employee_doj: "employee_doj",
    employee_addr: "employee_addr",
    maintenance_area_name: "maintenance_area_name",
    employee_designation_id: "employee_designation_id",
    maintenance_terminal_id: "maintenance_terminal_id",
    remark: "remark",
    status: "status",
    created_at: "created_at",
    updated_at: "updated_at",
  },
  v_rings: {
    id: "id",
    name: "name",
    total_nodes: "total_nodes",
    description: "description",
    ring_type_name: "ring_type_name",
    ring_type_code: "ring_type_code",
    maintenance_area_name: "maintenance_area_name",
    status: "status",
    created_at: "created_at",
    updated_at: "updated_at",
    maintenance_terminal_id: "maintenance_terminal_id",
    ring_type_id: "ring_type_id",
  },
  v_system_ring_paths_detailed: {
    created_at: "created_at",
    end_node_id: "end_node_id",
    end_node_name: "end_node_name",
    id: "id",
    logical_path_id: "logical_path_id",
    ofc_cable_id: "ofc_cable_id",
    path_name: "path_name",
    path_order: "path_order",
    route_name: "route_name",
    source_system_id: "source_system_id",
    start_node_id: "start_node_id",
    start_node_name: "start_node_name",
  },
  v_cable_segments_at_jc: {
    end_node_id: "end_node_id",
    fiber_count: "fiber_count",
    id: "id",
    jc_node_id: "jc_node_id",
    original_cable_id: "original_cable_id",
    segment_order: "segment_order",
    start_node_id: "start_node_id",
  },
  v_junction_closures_complete: {
    id: "id",
    latitude: "latitude",
    longitude: "longitude",
    name: "name",
    node_id: "node_id",
    ofc_cable_id: "ofc_cable_id",
    position_km: "position_km",
  },
  v_ring_nodes: {
    id: "id",
    ip: "ip",
    lat: "lat",
    long: "long",
    name: "name",
    order_in_ring: "order_in_ring",
    remark: "remark",
    ring_id: "ring_id",
    ring_name: "ring_name",
    ring_status: "ring_status",
    system_status: "system_status",
    type: "type",
  },
} satisfies ValidatedColumnKeys;

// Programmatically create the array-based export from the validated object.
export const TABLE_COLUMN_KEYS = (Object.keys(TABLE_COLUMN_OBJECTS) as Array<keyof typeof TABLE_COLUMN_OBJECTS>).reduce(
  (acc, tableName) => {
    const value = TABLE_COLUMN_OBJECTS[tableName];
    acc[tableName] = Object.keys(value) as (keyof Row<typeof tableName>)[];
    return acc;
  },
  {} as { [K in PublicTableOrViewName]: (keyof Row<K>)[] }
);

export const TABLES = {
  user_profiles: "user_profiles",
  employees: "employees",
  lookup_types: "lookup_types",
  rings: "rings",
  employee_designations: "employee_designations",
  maintenance_areas: "maintenance_areas",
  ofc_cables: "ofc_cables",
  ofc_connections: "ofc_connections",
  nodes: "nodes",
  systems: "systems",
  sfp_based_connections: "sfp_based_connections",
  management_ports: "management_ports",
  sdh_connections: "sdh_connections",
  sdh_node_associations: "sdh_node_associations",
  sdh_systems: "sdh_systems",
  system_connections: "system_connections",
  vmux_connections: "vmux_connections",
  vmux_systems: "vmux_systems",
  files: "files",
  folders: "folders",
  ring_based_systems: "ring_based_systems",
  logical_path_segments: "logical_path_segments",
  logical_fiber_paths: "logical_fiber_paths",
  junction_closures: "junction_closures",
  cable_segments: "cable_segments",
  fiber_splices: "fiber_splices",
  logical_paths: "logical_paths",
} as const;

export const VIEWS = {
  v_cable_utilization: "v_cable_utilization",
  v_end_to_end_paths: "v_end_to_end_paths",
  v_nodes_complete: "v_nodes_complete",
  v_ofc_cables_complete: "v_ofc_cables_complete",
  v_ofc_connections_complete: "v_ofc_connections_complete",
  v_system_connections_complete: "v_system_connections_complete",
  v_systems_complete: "v_systems_complete",
  v_user_profiles_extended: "v_user_profiles_extended",
  v_lookup_types: "v_lookup_types",
  v_employee_designations: "v_employee_designations",
  v_maintenance_areas: "v_maintenance_areas",
  v_employees: "v_employees",
  v_rings: "v_rings",
  v_system_ring_paths_detailed: "v_system_ring_paths_detailed",
  v_cable_segments_at_jc: "v_cable_segments_at_jc",
  v_junction_closures_complete: "v_junction_closures_complete",
  v_ring_nodes: "v_ring_nodes",
} as const;

export const TABLE_NAMES = {
  ...TABLES,
  ...VIEWS,
} as const;
